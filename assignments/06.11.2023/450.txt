class Solution {
    public:
    TreeNode* findMinvalFromRight(TreeNode* root){
        TreeNode* temp = root;
        while(temp -> left != NULL){
            temp = temp -> left;
        }
        return temp;
    }
    TreeNode* solve(TreeNode* root, int key){
        //base case
        if(root == NULL){
            return NULL;
        }

        if(root -> val == key){
            //0 child
            if(root -> left == NULL && root -> right == NULL){
                delete(root);

                return NULL;
            }
            //1 child
            if(root -> left != NULL && root -> right == NULL){
                TreeNode* temp = root -> left;
                delete(root);

                return temp;
            }

            if(root -> left == NULL && root -> right != NULL){
                TreeNode* temp = root -> right;
                delete(root);

                return temp;
            }

            //2 child
            if(root -> left != NULL && root -> right != NULL){
                TreeNode* maxi = findMinvalFromRight(root->right);
                root -> val = maxi -> val;
                root -> right = solve(root -> right, maxi->val);
            }
        }

        else if(root -> val < key){
            root -> right = solve(root -> right, key);
        }
        else{
            root -> left = solve(root -> left, key);
        }

        return root;
    }
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL){
            return NULL;
        }

        return solve(root, key);
    }
};