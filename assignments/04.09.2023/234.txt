class Solution {
    public:
    ListNode* reverse(ListNode* head){
        //base case
        if(head == NULL || head -> next == NULL){
            return head;
        }

        ListNode* temp = head;
        ListNode* prev = NULL;
        ListNode* forward = NULL;

        while(temp != NULL){
            forward = temp -> next;
            temp -> next = prev;
            prev = temp;
            temp = forward;
        }
        return prev;
    }

    ListNode* findMiddle(ListNode* head){
        //base case
        if(head == NULL || head -> next == NULL){
            return head;
        }

        ListNode* slow = head;
        ListNode* fast = head;

        while(fast != NULL){
            fast = fast -> next;
            if(fast != NULL){
                fast = fast -> next;
            }
            slow = slow -> next;
        }

        return slow;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head -> next == NULL){
            return true;
        }
        
        ListNode* temp = head;
        ListNode* mid = findMiddle(head);

        while(temp -> next != mid){
            temp = temp -> next;
        }

        temp -> next = reverse(mid);

        mid = temp -> next;
        temp = head;

        while(mid != NULL){
            if(temp -> val != mid -> val){
                return false;
            }
            temp = temp -> next;
            mid = mid -> next;
        }
        return true;
    }
};