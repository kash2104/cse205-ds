class Solution {
    public:
    int findPartition(vector<int>& arr, int low, int high){
        int pivot = arr[low];
        int i = low;
        int j = high;

        while(i < j){
            while(i <= high - 1 && arr[i] <= pivot){
                i++;
            }
            while(j >= low + 1 && arr[j] > pivot){
                j--;
            }
            if(i < j){
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[j],arr[low]);

        return j;
    }
    void quicksort(vector<int>& arr, int low, int high){
        if(low >= high){
            return;
        }

        int ind = findPartition(arr,low,high);

        quicksort(arr,low,ind-1);
        quicksort(arr,ind+1,high);
    }
public:
    vector<vector<int>> minimumAbsDifference(vector<int>& arr) {
        quicksort(arr,0,arr.size()-1);

        int mindiff = INT_MAX;

        for(int i = 0; i+1 < arr.size(); i++){
            if(arr[i+1] - arr[i] < mindiff){
                mindiff = arr[i+1] - arr[i];
            }
        }

        vector<vector<int>>ans;
        for(int i = 0; i+1 < arr.size(); i++){
            if(arr[i+1] - arr[i] == mindiff){
                ans.push_back({arr[i],arr[i+1]});
            }
        }
        return ans;
    }
};