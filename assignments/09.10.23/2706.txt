class Solution {
    public:
    int findPartition(vector<int>& prices,int low, int high){
        int pivot = prices[low];
        int i = low;
        int j = high;

        while(i < j){
            while(i <= high -1 && prices[i] <= pivot){
                i++;
            }
            while(j >= low + 1 && prices[j] >= pivot){
                j--;
            }

            if(i < j){
                swap(prices[i], prices[j]);
            }
        }
        swap(prices[low], prices[j]);

        return j;

    }
    void quicksort(vector<int>& prices,int low, int high){
        //base case
        if(low >= high){
            return;
        }

        int ind = findPartition(prices,low,high);
        quicksort(prices,low,ind-1);
        quicksort(prices,ind+1,high);
    }
public:
    int buyChoco(vector<int>& prices, int money) {
        int size = prices.size() - 1;
        quicksort(prices,0,size);
        //sort(prices.begin(), prices.end());
        int count = 0;
        int leftover = money;
        for(int i = 0; i < prices.size(); i++){
            if(prices[i] <= leftover && count < 2){
                leftover -= prices[i];
                count++;
            }
            
        }
        if(count != 2){
            return money;
        }
        else{
            return leftover;
        }
    }
};