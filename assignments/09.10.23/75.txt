class Solution {
    public:
    void merge(vector<int>& nums, int low, int mid, int high){
        int left = low;
        int right = mid+1;
        vector<int>temp(nums.size());
        int ind = 0;

        while(left <= mid && right <= high){
            if(nums[left] <= nums[right]){
                temp[ind] = nums[left];
                left++;
                ind++;
            }
            else{
                temp[ind] = nums[right];
                right++;
                ind++;
            }
        }

        while(left <= mid){
            temp[ind] = nums[left];
            left++;
            ind++;
        }

        while(right <= high){
            temp[ind] = nums[right];
            right++;
            ind++;
        }

        for(int i = low; i <= high; i++){
            nums[i] = temp[i - low];
        }
    }
    void mergesort(vector<int>& nums, int low, int high){
        //base case
        if(low >= high){
            return;
        }

        int mid = low + (high - low)/2;

        mergesort(nums,low,mid);
        mergesort(nums,mid+1,high);

        merge(nums,low,mid,high);
    }
public:
    void sortColors(vector<int>& nums) {
        int size = nums.size() - 1;
        mergesort(nums,0,size);
    }
};