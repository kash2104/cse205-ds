class Solution {
    public:
    int findPartition(vector<int>& nums,int low,int high){
        int pivot = nums[low];
        int i = low;
        int j = high;

        while(i < j){
            while(i <= high-1 && nums[i] <= pivot){
                i++;
            }
            while(j >= low+1 && nums[j] > pivot){
                j--;
            }
            if(i < j){
                swap(nums[i], nums[j]);
            }
        }
        swap(nums[low],nums[j]);
        return j;
    }

    void quicksort(vector<int>& nums,int low,int high){
        if(low >= high){
            return;
        }

        int ind = findPartition(nums,low,high);

        quicksort(nums,low,ind-1);
        quicksort(nums,ind+1,high);
    }
public:
    int minimumSum(int num) {
        int x = num;
        vector<int>arr;
        while(x != 0){
            int digit = x % 10;
            x = x / 10;
            arr.push_back(digit);
        }
        int size = arr.size() - 1;
        quicksort(arr,0,size);

        int th = (arr[0])*10  ;
        int hu = (arr[1])*10  ;
        int te = (arr[2])*1  ;
        int on = (arr[3])*1  ;

       int num1 = th + on;
       int num2 = hu + te;

       return num1 + num2;
    }
};