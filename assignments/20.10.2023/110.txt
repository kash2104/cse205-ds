class Solution {
    public:
    pair<bool,int>solve(TreeNode* root){
        //base case
        if(root == NULL){
            pair<bool, int>p = make_pair(true, 0);
            return p;
        }

        pair<bool, int>leftans = solve(root -> left);
        pair<bool, int>rightans = solve(root -> right);

        bool leftflag = leftans.first;
        bool rightflag = rightans.first;
        int diff = abs(leftans.second - rightans.second);

        pair<bool, int>ans;

        ans.second = max(leftans.second, rightans.second) + 1;

        if(leftflag && rightflag && diff <= 1){
            ans.first = true;
        }
        else{
            ans.first = false;
        }

        return ans;
    }
public:
    bool isBalanced(TreeNode* root) {
        if(root == NULL){
            return true;
        }

       pair<bool,int>ans = solve(root);

       return ans.first;
    }
};